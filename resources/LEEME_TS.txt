1. Fichero distancias_ts_100_2016.txt

Contiene la información de distancias para el problema de 100 ciudades. Utilizando una inicialización voraz la solución generada con esta matriz de distancias es la siguiente:
RECORRIDO: 98 44 83 29 2 65 31 15 48 96 8 33 95 54 85 56 93 13 72 45 63 10 58 7 41 55 87 97 68 17 82 75 40 20 9 50 70 79 71 34 86 51 19 57 12 53 3 52 88 64 16 73 26 36 46 14 38 80 66 5 62 81 76 6 60 74 42 37 67 1 28 11 35 24 4 78 27 39 89 23 92 84 43 32 49 18 47 25 22 90 69 21 77 59 61 99 94 91 30
COSTE (km): 4950


2. Fichero aleatorios_ts_2016_casoN.txt:

Contiene un total de 99 números aleatorios enteros en el rango [0, 1) que son utilizados para la generación de la solución inicial.
Para ello deben transformarse a valores de ciudad, valores enteros "v" en el rango [1, 99], tal que:

v= 1 + floor (r * 99)



3. Fichero traza_ts_2016_casoN.txt:

Contiene la traza de ejecución del caso de uso paso a paso para los números aleatorios del fichero anterior. En el fichero se muestra la siguiente información:

* SOLUCIÓN INICIAL
	- Recorrido inicial, generado mediante el método de inicialización aleatoria descrito en la práctica P1, y utilizando los valores
	  proporcionados en el fichero de números aleatorios.
	- Coste (en km) de la solución, longitud total del recorrido.

* ITERACIONES
	- Índices de intercambio. Posiciones en el array de ciudades que se intercambian para generar la nueva solución.
	  Para generar el vecindario de una solución se exploran todos los posibles intercambios (i, j), que cumplan las siguientes condiciones:
		-> i != j
		-> i > j
	  De entre todos los intercambios generados se descartan aquellos contenidos en la lista tabú y nos quedamos con el de menor coste, el "mejor vecino".
          Los índices de intercambio con los que se ha generado el mejor vecino son los que se muestran en la traza.
	- Coste (en km) de la solución, longitud total del recorrido.
        - Iteraciones sin mejora. Es el número de iteraciones que han pasado sin encontrar una solución cuyo coste mejore al de la mejor solución encontrada hasta el momento.
	  Un 0 indica que se ha mejorado la mejor solución en la iteración actual.
	- Contenido de la lista tabú, después de insertar los índices de intercambio que han generado la solución en la iteración actual.
	  El orden de la lista tabú es de más antiguo a más reciente. Todo nuevo elemento en la lista se inserta en la última posición.

* REINICIOS
	- Cuando el número de iteraciones sin mejora alcanza su valor máximo, se señala esta operación con la marca: "REINICIO: XX", 
	  donde XX es el número de veces que se ha llevado a cabo esta operación en la ejecución del algoritmo.

* MEJOR SOLUCIÓN
	- Recorrido de la mejor solución encontrada por el algoritmo.
	- Coste (en km) de la mejor solución, longitud total del recorrido.


4. A tener en cuenta para la generación de la traza:
Para facilitar el proceso de evaluación se comparará la traza generada por vuestra implementación con la traza de referencia, por lo que debéis 
seguir exactamente el mismo formato a la hora de imprimir los resultados.

También es requisito que vuestra práctica pueda ejecutarse por línea de comandos y acepte, los siguientes argumentos en este orden:
	fichero_distancias [fichero_aleatorios]

El segundo argumento es opcional: 
	* Si no se le proporciona, vuestra implementación generará una secuencia de números aleatorios diferente en cada ejecución. 
	* Si se le proporciona, se utilizará la secuencia de valores proporcionados en el fichero.

La salida debe imprimirse por consola, de forma que se pueda ejecutar por línea de comandos de la siguiente forma:
	* C/C++:	./ejecutable fichero_distancias [fichero_aleatorios] > traza_salida.txt
	* Java:	java -jar fichero_distancias [fichero_aleatorios] > traza_salida.txt
	* Python:	./script.py fichero_distancias [fichero_aleatorios] > traza_salida.txt
